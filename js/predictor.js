/*jslint node: true , browser: true */
/*global window */
"use strict";

var circ = require('./circ');

function Predictor(aNChanels, aNFrames, aPerm, aDestination) {

	var self=this;


	// The excel estimator_map
	// This calculate an LLR (The index) given a error^2

	self.pr_arr = [  1.099054669,0.409119007,0.205950937,0.127219495,0.089325723,0.067993884,0.054580733,0.045453976,
			0.038874677,0.033921102,0.030063963,0.026979339,0.024458544,0.022361355,0.020590201,0.019075171,
			0.017764896,0.016620811,0.015613416,0.014719766,0.013921758,0.013204918,0.012557538,0.011970052,
			0.011434564,0.010944502,0.010494353,0.010079457,0.009695852,0.009340143,0.009009409,0.008701122,
			0.008413082,0.008143366,0.007890289,0.007652362,0.007428270,0.007216847,0.007017051,0.006827952,
			0.006648718,0.006478598,0.006316918,0.006163066,0.006016490,0.005876687,0.005743200,0.005615612,
			0.005493541,0.005376638,0.005264583,0.005157082,0.005053862,0.004954675,0.004859289,0.004767490,
			0.004679080,0.004593876,0.004511706,0.004432412,0.004355846,0.004281870,0.004210354,0.004141179,
			0.004074232,0.004009407,0.003946605,0.003885732,0.003826703,0.003769433,0.003713847,0.003659870,
			0.003607435,0.003556476,0.003506932,0.003458745,0.003411860,0.003366225,0.003321790,0.003278510,
			0.003236340,0.003195238,0.003155163,0.003116078,0.003077947,0.003040735,0.003004410,0.002968939,
			0.002934295,0.002900447,0.002867369,0.002835035,0.002803420,0.002772501,0.002742254,0.002712658,
			0.002683693,0.002655339,0.002627575,0.002600385,0.002573751,0.002547655,0.002522082,0.002497016,
			0.002472442,0.002448345,0.002424713,0.002401532,0.002378789,0.002356471,0.002334568,0.002313067,
			0.002291957,0.002271229,0.002250871,0.002230874,0.002211229,0.002191926,0.002172956,0.002154311,
			0.002135983,0.002117963,0.002100244,0.002082819,0.002065680,0.002048820,0.002032232,0.002015910,
			0.001999848,0.001984040,0.001968479,0.001953159,0.001938076,0.001923223,0.001908596,0.001894190,
			0.001879999,0.001866018,0.001852244,0.001838671,0.001825295,0.001812112,0.001799118,0.001786308,
			0.001773680,0.001761228,0.001748950,0.001736841,0.001724898,0.001713119,0.001701499,0.001690035,
			0.001678724,0.001667564,0.001656551,0.001645682,0.001634954,0.001624366,0.001613913,0.001603594,
			0.001593405,0.001583345,0.001573412,0.001563601,0.001553913,0.001544343,0.001534890,0.001525553,
			0.001516327,0.001507213,0.001498208,0.001489309,0.001480515,0.001471824,0.001463235,0.001454745,
			0.001446353,0.001438057,0.001429855,0.001421747,0.001413730,0.001405802,0.001397963,0.001390211,
			0.001382544,0.001374961,0.001367460,0.001360041,0.001352702,0.001345442,0.001338259,0.001331152,
			0.001324120,0.001317162,0.001310277,0.001303463,0.001296719,0.001290045,0.001283439,0.001276901,
			0.001270428,0.001264021,0.001257678,0.001251398,0.001245181,0.001239025,0.001232929,0.001226893,
			0.001220916,0.001214997,0.001209135,0.001203329,0.001197578,0.001191882,0.001186240,0.001180651,
			0.001175114,0.001169629,0.001164195,0.001158811,0.001153477,0.001148191,0.001142954,0.001137764,
			0.001132621,0.001127524,0.001122473,0.001117467,0.001112505,0.001107588,0.001102713,0.001097881,
			0.001093091,0.001088343,0.001083635,0.001078969,0.001074342,0.001069754,0.001065206,0.001060696,
			0.001056224,0.001051790,0.001047393,0.001043032,0.001038707,0.001034418,0.001030164,0.001025945,
			0.001021761,0.001017610,0.001013493,0.001009409,0.001005358,0.001001339,0.000997353,0.000993397];


	self.err2llr = function(err) {
		var llr=0;
		for (var b=0x80; b>0; b = b >> 1) {
			if (err < self.pr_arr[llr | b ]) {
				llr = llr | b;
			}
		}
		return llr;
	};





	self.perm=aPerm;
	self.nChanels = aNChanels;
	self.nFrames = aNFrames;
	self.destination = aDestination;
	self.nSyncBits = Math.floor(aNFrames * aNChanels / 2 + 0.5);

	self.estimate = function(inB, p) {
		var pp,bb, l, arg, res;

		var err=0;
		var nerr=0;
		var err2=0;
		var nerr2=0;
		var e;
		var fr = Math.floor(p / self.nChanels);
		var ch = p % self.nChanels;

		if (fr>0) {
			pp = p - self.nChanels;
			bb = self.perm.iConvert[pp];
			l = (bb & 1) ? 0.5 : 0;
			e = circ.err(inB[pp], l);
			err += e;
			nerr ++;
			err2 += e*e;
			nerr2 ++;
		}
		if (fr<self.nFrames-1) {
			pp = p + self.nChanels;
			bb = self.perm.iConvert[pp];
			l = (bb & 1) ? 0.5 : 0;
			e = circ.err(inB[pp], l);
			err += e;
			nerr ++;
			err2 += e*e;
			nerr2 ++;
		}
		if (ch >0) {
			pp = p -1;
			bb = self.perm.iConvert[pp];
			l = (bb & 1) ? 0.5 : 0;
			e = circ.err(inB[pp], l);
			err2 += e*e;
			nerr2 ++;
		}
		if (ch < self.nChanels-1) {
			pp = p +1;
			bb = self.perm.iConvert[pp];
			l = (bb & 1) ? 0.5 : 0;
			e = circ.err(inB[pp], l);
			err2 += e*e;
			nerr2 ++;
		}

		err = err /nerr;
		arg = circ.norm(inB[p] - err);
		res = 4*Math.abs(arg-0.5) -1;

		e = 1 - Math.abs(res);
		err2 += e*e;
		nerr2 ++;

		res = res>0 ? 1 : -1;

		bb = self.perm.iConvert[p];
		if (bb & 1) res = -res;

//		err2 = err2 / nerr2;

		res = res * self.err2llr( err2) * 64;

		return res;

	};

	self.processData= function(inB) {
		var i;
		var outB = [];
		for (i = self.nSyncBits; i < self.nChanels * self.nFrames;  i++) {

			outB.push( self.estimate(inB, self.perm.convert[i]));
		}

		self.destination.processData(outB);
	};

	return self;
}

module.exports = Predictor;
